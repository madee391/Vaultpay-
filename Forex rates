import { createClient } from 'npm:@supabase/supabase-js';
import { verifyAuth } from './lib/auth.ts';

Deno.serve(async (req: Request) => {
  const supabase = createClient(Deno.env.get('SUPABASE_URL')!, Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!);
  const auth = await verifyAuth(req, supabase);

  if (!auth.ok) {
    return new Response(JSON.stringify({ error: auth.error || 'Unauthorized' }), { status: 401 });
  }

  const url = new URL(req.url);
  const baseCurrency = url.searchParams.get('base') || 'USD';
  const force = url.searchParams.get('force') === '1'; // admin may call ?force=1 to refresh

  // check cache
  const { data: cached } = await supabase.from('forex_rates').select('rates,last_updated').eq('base_currency', baseCurrency).single();

  // If admin via API key or admin user and force requested -> refresh & upsert
  const isAdmin = auth.role === 'admin';
  if (isAdmin && force) {
    try {
      const apiKey = Deno.env.get('FOREX_API_KEY') || '';
      const resp = await fetch(`https://api.exchangerate.host/latest?base=${baseCurrency}${apiKey ? `&apikey=${apiKey}` : ''}`);
      const data = await resp.json();

      await supabase.from('forex_rates').upsert({
        base_currency: baseCurrency,
        rates: JSON.stringify(data.rates),
        last_updated: new Date().toISOString()
      }, { onConflict: ['base_currency'] });

      // audit admin refresh
      if (auth.isApiKeyAdmin) {
        await supabase.from('admin_audit').insert({
          api_key_id: (req.headers.get('x-api-key') || '').slice(0,8),
          action: 'forex_refresh',
          details: { base: baseCurrency, forced: true }
        });
      }

      return new Response(JSON.stringify(data), { headers: { 'Content-Type': 'application/json', 'Cache-Control': 'public, max-age=3600' }});
    } catch (err) {
      if (cached) {
        return new Response(JSON.stringify({ rates: JSON.parse(cached.rates), last_updated: cached.last_updated }), { headers: { 'Content-Type': 'application/json' }});
      }
      return new Response(JSON.stringify({ error: (err as Error).message }), { status: 500 });
    }
  }

  // Non-admins: return cached if present, otherwise fetch live (no upsert)
  if (cached) {
    return new Response(JSON.stringify({ rates: JSON.parse(cached.rates), last_updated: cached.last_updated }), { headers: { 'Content-Type': 'application/json' }});
  }

  // No cache -> fetch live
  try {
    const apiKey = Deno.env.get('FOREX_API_KEY') || '';
    const resp = await fetch(`https://api.exchangerate.host/latest?base=${baseCurrency}${apiKey ? `&apikey=${apiKey}` : ''}`);
    const data = await resp.json();
    return new Response(JSON.stringify(data), { headers: { 'Content-Type': 'application/json', 'Cache-Control': 'public, max-age=3600' }});
  } catch (err) {
    return new Response(JSON.stringify({ error: (err as Error).message }), { status: 500 });
  }
});
